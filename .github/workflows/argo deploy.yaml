name: Argo CD Deploy (local)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy ArgoCD to local cluster
    runs-on: self-hosted
    env:
      KUBECONFIG: C:\Users\ealol\.kube\config

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ------------------------------
      # Step 1: Ensure namespace
      # ------------------------------
      - name: Ensure argocd namespace
        shell: powershell
        run: |
          Write-Host "Applying ArgoCD namespace..."
          kubectl apply -f monitoring/argocd/namespace.yaml

      # ------------------------------
      # Step 2: Install ArgoCD core components
      # ------------------------------
      - name: Install ArgoCD core
        shell: powershell
        run: |
          Write-Host "Installing ArgoCD..."
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          Write-Host "Waiting for ArgoCD server rollout..."
          kubectl -n argocd rollout status deploy/argocd-server --timeout=240s

      # ------------------------------
      # Step 3: Apply ingress and Application
      # ------------------------------
      - name: Configure ingress and register Application
        shell: powershell
        run: |
          Write-Host "Applying ingress..."
          kubectl apply -f monitoring/argocd/ingress.yaml
          Write-Host "Applying app definition..."
          kubectl apply -f monitoring/argocd/apps/testapp.yaml
          Write-Host "Listing resources..."
          kubectl get pods -n argocd
          kubectl get svc -n argocd
          kubectl get ingress -n argocd

      # ------------------------------
      # Step 4: Print login credentials
      # ------------------------------
      - name: Show ArgoCD Login Credentials
        shell: powershell
        run: |
          Write-Host "====================================================="
          Write-Host "ArgoCD is ready!"
          Write-Host "URL: http://argocd.local"
          Write-Host "Username: admin"
          Write-Host "Password:"
          $b64 = kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}'
          if ($b64) {
            $bytes = [System.Convert]::FromBase64String($b64)
            $pwd = [System.Text.Encoding]::UTF8.GetString($bytes)
            Write-Host $pwd
          } else {
            Write-Host "<password secret not yet created>"
          }
          Write-Host "====================================================="
