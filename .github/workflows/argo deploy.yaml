name: Argo CD Deploy (local)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: deploy
    runs-on: self-hosted
    env:
      KUBECONFIG: C:\Users\ealol\.kube\config

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Ensure namespace via YAML (idempotent, no 'already exists' errors)
      - name: Ensure argocd namespace (YAML)
        shell: pwsh
        run: |
          kubectl apply -f monitoring/argocd/namespace.yaml

      # Install Argo CD core (official upstream)
      - name: Install Argo CD core
        shell: pwsh
        run: |
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl -n argocd rollout status deploy/argocd-server --timeout=240s

      # Ingress and Application
      - name: Configure ingress and register Application
        shell: pwsh
        run: |
          kubectl apply -f monitoring/argocd/ingress.yaml
          kubectl apply -f monitoring/argocd/apps/testapp.yaml
          kubectl -n argocd get ingress
          kubectl -n argocd get pods

      # Print the initial admin password detected by Argo CD
      # (This is Windows/PowerShell-safe decoding)
      - name: Show ArgoCD Login Credentials
        shell: pwsh
        run: |
          $b64 = kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' 2>$null
          if (-not $b64) {
            Write-Host "====================================================="
            Write-Host "ArgoCD is ready!"
            Write-Host "URL: http://argocd.local"
            Write-Host "Username: admin"
            Write-Host "Password: <not found> (secret missing - maybe previously customized?)"
            Write-Host "You can always get it locally:"
            Write-Host "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 --decode"
            Write-Host "====================================================="
            exit 0
          }
          $pwd = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($b64))
          Write-Host "====================================================="
          Write-Host "ArgoCD is ready!"
          Write-Host "URL: http://argocd.local"
          Write-Host "Username: admin"
          Write-Host "Password: $pwd"
          Write-Host "====================================================="
